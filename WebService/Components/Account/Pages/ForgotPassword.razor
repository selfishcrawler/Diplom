@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WebService.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Забыли пароль?</PageTitle>

<h1>Забыли пароль?</h1>
<h2>Введите номер телефона.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Phone" class="form-control" autocomplete="tel" aria-required="true" placeholder="+71234567890" />
                <label for="phone" class="form-label">Номер телефона</label>
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сбросить пароль</button>
        </EditForm>
     </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByNameAsync(Input.Phone);//await UserManager.FindByEmailAsync(Input.Phone);
        if (user is null || !(await UserManager.IsPhoneNumberConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        //await EmailSender.SendPasswordResetLinkAsync(user, Input.Phone, HtmlEncoder.Default.Encode(callbackUrl));

        //RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        //в реальности обработка отправки кода на смену пароля
        RedirectManager.RedirectTo(HtmlEncoder.Default.Encode(callbackUrl));
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "{0} не может быть пустым")]
        [DataType(DataType.PhoneNumber)]
        [RegularExpression("^\\+7\\d{10}$", ErrorMessage = "{0} имеет неверный формат")]
        [Display(Name = "Номер телефона")]
        public string Phone { get; set; } = "";
    }
}
